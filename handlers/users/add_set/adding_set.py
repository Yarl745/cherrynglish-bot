import logging
from io import BytesIO

from aiogram.dispatcher import FSMContext
from aiogram.types import ContentTypes, Message, ReplyKeyboardRemove, InputFile, MediaGroup, InputMediaPhoto

import keyboards
from data.config import HELPER_CHANNEL_ID
from filters import IsUser
from loader import dp, db, bot
from states.adding_set import AddingSet
from utils.db_api import redis_commands
from utils.misc import rate_limit
from utils.photo_crop import get_drawn_img, get_separated_imgs


@rate_limit(0)
@dp.message_handler(state=AddingSet.read_photos, content_types=ContentTypes.PHOTO)
async def read_photo(msg: Message, state: FSMContext):
    await msg.bot.send_chat_action(msg.chat.id, 'upload_photo')
    async with state.proxy() as data:
        data["photo_ids"].append(msg.photo[-1].file_id)


@dp.message_handler(state=AddingSet.read_photos, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚è©")
async def save_photos(msg: Message, state: FSMContext):
    photo_ids = (await state.get_data())["photo_ids"]
    user = msg.from_user

    if not photo_ids:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —Å–≤–æ–µ–≥–æ –Ω–∞–±–æ—Ä–∞ ü•¥")
        return

    await msg.answer(
        "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤:",
        reply_markup=ReplyKeyboardRemove()
    )

    await AddingSet.read_set_name.set()

    logging.info(f"For @{user.username}-{user.id} save photos in redis {photo_ids}")


@dp.message_handler(state=AddingSet.read_photos, text="–û—Ç–º–µ–Ω–∏—Ç—å‚Ü©Ô∏è")
async def cancel_creating_set(msg: Message, state: FSMContext):
    user = msg.from_user

    await msg.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=keyboards.default.bot_menu
    )
    await msg.answer_sticker("CAACAgIAAxkBAAPMYE3_4aKH6ddyThPFL2npELzRzVUAAhAAA8A2TxPqgYop8R8C6B4E")

    await state.finish()

    logging.info(f"@{user.username}-{user.id} cancel creating set")


@dp.message_handler(state=AddingSet.read_set_name)
async def read_set_name(msg: Message, state: FSMContext):
    user = msg.from_user
    set_name = msg.text

    if len(set_name) > 50:
        await msg.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤ ü•¥\n"
            "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â—ë —Ä–∞–∑:"
        )
        return

    await state.update_data(set_name=set_name)
    photo_id: str = (await state.get_data())["photo_ids"][0]

    await msg.bot.send_chat_action(user.id, "upload_photo")

    img_file = BytesIO()
    await (await msg.bot.get_file(photo_id)).download(destination=img_file)
    drawn_img = await get_drawn_img(img_file)

    crop_range_str = await redis_commands.get_last_crop_range_str(user.id)
    await msg.answer_photo(
        drawn_img,
        caption="–í–≤–µ–¥–∏ –¥–∏–∞–ø–æ–∑–æ–Ω –≤—ã—Å–æ—Ç –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ–±—Ä–µ–∂–µ—Ç—Å—è —á–∞—Å—Ç—å "
                "–∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Å–ª–æ–≤–æ–º –∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º.\n\n"
                "–î–∏–∞–ø–æ–∑–æ–Ω: –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å–ª–æ–≤–∞, –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º, "
                "–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å–ª–æ–≤–∞.\n\n"
                "<i>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 300 470 1150</i>",
        reply_markup=keyboards.default.get_text_menu(crop_range_str) if crop_range_str else ReplyKeyboardRemove()
    )

    await AddingSet.config_sizes.set()

    logging.info(f"@{user.username}-{user.id} read set name {set_name}")


@dp.message_handler(state=AddingSet.config_sizes, text="üî∏–°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Äüî∏")
async def save_set(msg: Message, state: FSMContext):
    user = msg.from_user

    await msg.bot.send_chat_action(user.id, "upload_photo")
    await AddingSet.loading_data.set()

    data = await state.get_data()
    crop_range = data["crop_range"]
    set_name = data["set_name"]
    photo_ids = data["photo_ids"]

    set_id = await db.add_set(
        user_id=user.id,
        name=set_name
    )

    words_data = await prepare_words_data(set_id, photo_ids, crop_range)
    logging.info(f"Prepared words data for @{user.username}-{user.id}")

    for word_data in words_data:
        await db.add_word(**word_data)

    await redis_commands.set_last_crop_range(user.id, crop_range)

    await msg.answer(
        "–¢–≤–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –±—ã–ª —É—Å–ø–µ–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
        reply_markup=keyboards.default.bot_menu
    )
    await msg.answer_sticker("CAACAgIAAxkBAAIB-2BQzR9z-1xm1HM6zK9C_yBuTwgdAAIdAAPANk8TXtim3EE93kgeBA")

    await state.finish()
    logging.info(f"Created new set {set_name}-{set_id} for @{user.username}-{user.id}")


@dp.message_handler(state=AddingSet.config_sizes)
async def config_crop_range(msg: Message, state: FSMContext):
    user = msg.from_user
    crop_range_str = msg.text

    if not crop_range_str.replace(" ", "").isdecimal() or len(crop_range_str.split(" ")) != 3:
        await msg.answer(
            "–í–≤–æ–¥–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –Ω—É–∂–Ω–æ —Ç—Ä–µ–º—è —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ü•¥\n"
            "<i>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 300 470 1150</i>"
        )
        return
    elif len(crop_range_str) > 25:
        await msg.answer(
            "–ö–∞–∫–∏–µ-—Ç–æ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ ü•¥\n"
            "–ù–∞ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –æ—Ç–º–µ—á–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã—Å–æ—Ç—ã –∑–µ–ª—ë–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π."
        )

    crop_range = [int(num) for num in crop_range_str.split(" ")]
    crop_range.sort()

    photo_id: str = (await state.get_data())["photo_ids"][0]
    await msg.bot.send_chat_action(user.id, "upload_photo")

    img_file = BytesIO()
    photo = await msg.bot.get_file(photo_id)

    await photo.download(destination=img_file)

    word_img, transl_img = await get_separated_imgs(img_file, *crop_range)

    if not word_img:
        await msg.answer("–¢—ã –∑–∞–¥–∞–ª(-–∞) –¥–∏–ø–∞–∑–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ü•¥\n"
                         "–ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å –∑–µ–ª—ë–Ω–Ω–æ–π –ø–æ–ª–æ—Å–æ–π –ø–æ–∫–∞–∑–∞–Ω—ã –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã.")
        return

    separated_imgs_album = MediaGroup()
    separated_imgs_album.attach_many(
        InputMediaPhoto(word_img),
        InputMediaPhoto(transl_img)
    )

    await state.update_data(crop_range=crop_range)

    await msg.answer_media_group(separated_imgs_album)
    await msg.answer(
        "–ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—Ä–µ–∑–∞–ª–∞—Å—å –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –≤–≤–µ–¥–∏ "
        "–¥–∏–∞–ø–æ–∑–æ–Ω –≤—ã—Å–æ—Ç –µ—â—ë —Ä–∞–∑.",
        reply_markup=keyboards.default.create_set_menu
    )

    logging.info(f"@{user.username}-{user.id} read crop_range {crop_range}")


async def prepare_words_data(set_id: int, photo_ids: list, crop_range: list) -> list:
    words_data = []

    for photo_id in photo_ids:
        img_file = BytesIO()
        await (await bot.get_file(photo_id)).download(destination=img_file)

        word_img, transl_img = await get_separated_imgs(img_file, *crop_range)
        word_img_id = (await bot.send_photo(HELPER_CHANNEL_ID, word_img)).photo[-1].file_id
        transl_img_id = (await bot.send_photo(HELPER_CHANNEL_ID, transl_img)).photo[-1].file_id

        words_data.append(dict(
            set_id=set_id,
            base_img_id=photo_id,
            word_img_id=word_img_id,
            transl_img_id=transl_img_id
        ))

    return words_data